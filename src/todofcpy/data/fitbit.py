import sys
import requests
from datetime import datetime, timedelta
import pandas as pd
from bs4 import BeautifulSoup

def _soupify(response):
	soup = BeautifulSoup(response.text,'xml')
	latitudes = soup.find_all('LatitudeDegrees')
	latList = [i.text for i in latitudes]
	lat_series = pd.Series(latList, dtype='float')

	longitudes = soup.find_all('LongitudeDegrees')
	lonList = [i.text for i in longitudes]
	lon_series = pd.Series(lonList, dtype='float')

	data_all = pd.DataFrame({'latitude':lat_series, 'longitude':lon_series})
	return data_all

def _get_activity(client_id, activity_id, access_token):
	header = {'Authorization': 'Bearer {}'.format(access_token)}
	# response = requests.get("https://api.fitbit.com/1/user/" + client_id + "/activities/" + str(activity_id) + ".tcx?includePartialTCX=true", headers=header)
	response = requests.get("https://api.fitbit.com/1/user/5VCFFD/activities/46536791473.tcx?includePartialTCX=true", headers=header)
	return response

def _get_metadata(self,kwargs):
	day_before = datetime.strptime(kwargs.get('date'), '%Y-%m-%d').date() - timedelta(days=1)
	header = {'Authorization': 'Bearer {}'.format(kwargs.get('access_token'))}
	response_activities = requests.get("https://api.fitbit.com/1/user/" + kwargs.get('client_id') + "/activities/list.json?afterDate=" + str(day_before) + "&sort=asc&offset=0&limit=10", headers=header).json()
	for val in response_activities['activities']:
		if(val['activityName'] == 'Soccer'):
			return val

	return "error"

class Fitbit:
	def __init__(self,**kwargs):
		"""
		Set's Fitbit's variable.

		Kwargs:
		   access_token (String): token generated by fitbit that allows user access to data.
		   client_id (String): OAuth 2.0 Client ID.
		   date (yyyy-MM-dd): date the soccer game/practice occured.
		"""

		try:
			if 'access_token' and 'client_id' and 'date' in kwargs:
				pass
				# print(kwargs.get('access_token'))
				# print(kwargs.get('client_id'))
				# print(kwargs.get('date'))
			else:
				raise ValueError()
		except ValueError:
			print("Error: Fitbit requires access_token and client_id and date")
			sys.exit()

		metadata = _get_metadata(self,kwargs)
		if metadata == "e":
			print("Error: No soccer acitvity on supplied date")
			sys.exit()

		self.__dict__.update(metadata)

		activity_response = _get_activity(kwargs.get('client_id'), metadata['logId'], kwargs.get('access_token'))

		df = _soupify(activity_response)

		print(df.head)